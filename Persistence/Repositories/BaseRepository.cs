using Domain.Entity.Abstraction;
using Microsoft.EntityFrameworkCore;

namespace Persistence.Repositories;

/// <summary>
/// Basic repository, by which all other repositories are added to the ServiceProvider.
/// </summary>
public interface IRepository;

/// <summary>
/// Interface for the basic CRUD operations on the provided entity type.
/// </summary>
/// <typeparam name="TEntity">Class type of the entity to be used by this repository</typeparam>
/// <typeparam name="TKey">Type of the Primary key <b>TEntity</b> uses.</typeparam>
public interface IBaseRepository<TEntity, TKey> : IRepository
    where TEntity : BaseEntity<TKey>
{
    /// <summary>
    /// Finds the entity with provided <b>entityId</b>.
    /// </summary>
    /// <param name="entityId">Key of the entity to be looked up.</param>
    /// <returns>Entity with the given <b>entityId</b> or <b>null</b> if it does not exists.</returns>
    Task<TEntity?> FindByIdAsync(TKey entityId);

    /// <summary>
    /// Returns all rows of the <b>TEntity</b> type from the DB.
    /// </summary>
    /// <returns>Collection of all entities.</returns>
    Task<ICollection<TEntity>> GetAllAsync();
    
    /// <summary>
    /// Counts the total number of elements inside the DB.
    /// </summary>
    /// <returns>Number of records of <b>TEntity</b> type in the DB.</returns>
    Task<int> CountAsync();
    
    /// <summary>
    /// Creates new row in the DB based on provided entity.
    /// </summary>
    /// <param name="entity">Entity to be persisted to the DB.</param>
    /// <returns>Key generated by the insert operation on the DB.</returns>
    Task<TEntity> CreateAsync(TEntity entity);
    
    /// <summary>
    /// Updates the provided entity to the desired.
    /// </summary>
    /// <param name="entity">New state of the entity to be persisted.</param>
    /// <returns>True if update operation was successful, otherwise false.</returns>
    Task<TEntity?> UpdateAsync(TEntity entity);
    
    /// <summary>
    /// Deletes the provided entity from the DB.
    /// </summary>
    /// <param name="entity">Entity to be deleted.</param>
    /// <returns>True if delete operation was successful, otherwise false.</returns>
    Task<bool> DeleteAsync(TEntity entity);
}

/// <summary>
/// Implementation of the <see cref="IBaseRepository{TEntity,TKey}"/>
/// </summary>
public abstract class BaseRepository<TEntity, TKey> : IBaseRepository<TEntity, TKey>
    where TEntity : BaseEntity<TKey>
{
    private readonly ApplicationDbContext _dbContext;
    
    protected readonly DbSet<TEntity> DbSet;
    
    protected BaseRepository(ApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
        DbSet = _dbContext.Set<TEntity>();
    }

    protected async Task<int> SaveChangesAsync()
    {
        return await _dbContext.SaveChangesAsync();
    }

    public async Task<TEntity?> FindByIdAsync(TKey entityId)
    {
        return await DbSet.FindAsync(entityId);
    }

    public async Task<int> CountAsync()
    {
        return await DbSet.CountAsync();
    }

    public async Task<ICollection<TEntity>> GetAllAsync()
    {
        return await DbSet.ToListAsync();
    }

    public async Task<TEntity> CreateAsync(TEntity entity)
    {
        var entityRes = await DbSet.AddAsync(entity);
        await SaveChangesAsync();
        return entityRes.Entity;
    }

    public async Task<TEntity?> UpdateAsync(TEntity entity)
    {
        DbSet.Update(entity);
        var result = await SaveChangesAsync();
        return result > 0 ? entity : null;
    }

    public async Task<bool> DeleteAsync(TEntity entity)
    {
        DbSet.Remove(entity);
        return await SaveChangesAsync() > 0;
    }
}